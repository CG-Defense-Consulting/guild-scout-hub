name: Pull Single RFQ PDF

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      solicitation_number:
        description: 'Solicitation number to download'
        required: true
        type: string
        default: 'SPE7L3-24-R-0001'
      output_dir:
        description: 'Output directory for PDF (optional)'
        required: false
        type: string
        default: ''
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false
  
  # Allow triggering via API/webhook
  repository_dispatch:
    types: [pull_single_rfq_pdf]
  
  # Scheduled runs (optional - uncomment if you want daily runs)
  # schedule:
  #   - cron: '0 9 * * *'  # Daily at 9 AM UTC

jobs:
  pull-rfq-pdf:
    name: Download RFQ PDF
    runs-on: ubuntu-latest
    
    # Set timeout for the entire job
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        
      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          sudo apt-get install -y libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xvfb
          
      - name: Install Python dependencies
        run: |
          cd etl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          # Create .env file from GitHub secrets
          cat > etl/.env << EOF
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY=${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          DIBBS_BASE_URL=https://dibbs2.bsm.dla.mil
          DIBBS_DOWNLOAD_DIR=./downloads
          SELENIUM_HEADLESS=true
          SELENIUM_TIMEOUT=30
          LOG_LEVEL=INFO
          LOG_FILE=./logs/etl.log
          SUPABASE_BUCKET_NAME=docs
          EOF
          
      - name: Create necessary directories
        run: |
          cd etl
          mkdir -p downloads logs
          
      - name: Run RFQ PDF download
        id: download
        run: |
          cd etl
          
          # Set environment variables
          export $(cat .env | xargs)
          
          # Build command arguments
          CMD_ARGS="${{ github.event.inputs.solicitation_number }}"
          
          if [ -n "${{ github.event.inputs.output_dir }}" ]; then
            CMD_ARGS="$CMD_ARGS --output-dir ${{ github.event.inputs.output_dir }}"
          fi
          
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            CMD_ARGS="$CMD_ARGS --verbose"
          fi
          
          echo "Running: python workflows/adhoc/pull_single_rfq_pdf.py $CMD_ARGS"
          
          # Run the workflow
          python workflows/adhoc/pull_single_rfq_pdf.py $CMD_ARGS
          
          # Check if PDF was downloaded
          if [ -f "downloads/${{ github.event.inputs.solicitation_number }}.PDF" ]; then
            echo "PDF downloaded successfully"
            echo "pdf_path=downloads/${{ github.event.inputs.solicitation_number }}.PDF" >> $GITHUB_OUTPUT
          else
            echo "PDF not found - checking for other PDF files"
            ls -la downloads/ || echo "No downloads directory or files found"
          fi
          
      - name: Upload PDF artifact
        if: steps.download.outputs.pdf_path
        uses: actions/upload-artifact@v4
        with:
          name: rfq-pdf-${{ github.event.inputs.solicitation_number }}
          path: etl/downloads/*.PDF
          retention-days: 7
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs
          path: etl/logs/
          retention-days: 30
          
      - name: Check for errors
        if: failure()
        run: |
          cd etl
          echo "=== Error Summary ==="
          echo "Checking logs for errors..."
          if [ -d "logs" ]; then
            find logs -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \;
          else
            echo "No logs directory found"
          fi
          
      - name: Cleanup
        if: always()
        run: |
          cd etl
          # Clean up downloaded files
          rm -rf downloads/*
          # Clean up logs (keep for artifact upload)
          # rm -rf logs/*
