name: Pull Single RFQ PDF

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      solicitation_number:
        description: 'Solicitation number to download'
        required: true
        type: string
        default: 'SPE7L3-24-R-0001'
      output_dir:
        description: 'Output directory for PDF (optional)'
        required: false
        type: string
        default: ''
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false
  
  # Allow triggering via API/webhook
  repository_dispatch:
    types: [pull_single_rfq_pdf]
  
  # Scheduled runs (optional - uncomment if you want daily runs)
  # schedule:
  #   - cron: '0 9 * * *'  # Daily at 9 AM UTC

jobs:
  pull-rfq-pdf:
    name: Download RFQ PDF
    runs-on: ubuntu-latest
    
    # Set timeout for the entire job
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb
          
      - name: Configure Chrome permissions
        run: |
          # Ensure Chrome can run in headless mode
          sudo mkdir -p /etc/opt/chrome/policies/managed/
          echo '{"CommandLineFlagSecurityWarningsEnabled": false}' | sudo tee /etc/opt/chrome/policies/managed/managed_policies.json
          
      - name: Verify Chrome installation
        run: |
          echo "Chrome version:"
          google-chrome --version || echo "Chrome not found in PATH"
          echo "Chrome binary location:"
          which google-chrome || echo "Chrome binary not found"
          
      - name: Install ChromeDriver
        run: |
          # Install ChromeDriver if not present
          if ! command -v chromedriver &> /dev/null; then
            echo "Installing ChromeDriver..."
            CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            echo "Chrome version detected: $CHROME_VERSION"
            
            # Download appropriate ChromeDriver version
            wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION" -O - || \
            wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE" -O -
            
            CHROMEDRIVER_VERSION=$(wget -q "https://chromedriver.storage.googleapis.com/LATEST_RELEASE" -O -)
            echo "ChromeDriver version to install: $CHROMEDRIVER_VERSION"
            
            wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver_linux64.zip
            
            echo "ChromeDriver installed successfully"
          else
            echo "ChromeDriver already installed:"
            chromedriver --version
          fi
          
      - name: Verify ChromeDriver installation
        run: |
          echo "ChromeDriver version:"
          chromedriver --version
          echo "ChromeDriver location:"
          which chromedriver
          
      - name: Install Python dependencies
        run: |
          cd etl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Verify key dependencies
          echo "Verifying Python dependencies..."
          python -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
          python -c "import pdfplumber; print(f'PDFPlumber version: {pdfplumber.__version__}')"
          python -c "from supabase import create_client; print('Supabase client import successful')"
          
      - name: Set up environment variables
        run: |
          # Create .env file from GitHub secrets
          cat > etl/.env << EOF
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY=${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DIBBS_BASE_URL=https://dibbs2.bsm.dla.mil
          DIBBS_DOWNLOAD_DIR=./downloads
          SELENIUM_HEADLESS=true
          SELENIUM_TIMEOUT=30
          LOG_LEVEL=INFO
          LOG_FILE=./logs/etl.log
          SUPABASE_BUCKET_NAME=docs
          EOF
          
      - name: Create necessary directories
        run: |
          cd etl
          mkdir -p downloads logs
          
      - name: Test Chrome setup
        run: |
          cd etl
          echo "Testing Chrome setup..."
          
          # Test basic Chrome functionality
          python -c "
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          
          print('Setting up Chrome options...')
          chrome_options = Options()
          chrome_options.add_argument('--headless')
          chrome_options.add_argument('--no-sandbox')
          chrome_options.add_argument('--disable-dev-shm-usage')
          chrome_options.add_argument('--disable-gpu')
          
          print('Initializing Chrome driver...')
          driver = webdriver.Chrome(options=chrome_options)
          
          print('Testing basic navigation...')
          driver.get('https://www.google.com')
          title = driver.title
          print(f'Page title: {title}')
          
          driver.quit()
          print('Chrome test completed successfully!')
          "
          
      - name: Download and Upload RFQ PDF
        id: download
        run: |
          cd etl
          
          # Set environment variables
          export $(cat .env | xargs)
          
          # Handle both workflow_dispatch and repository_dispatch events
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger from GitHub UI
            SOLICITATION_NUMBER="${{ github.event.inputs.solicitation_number }}"
            OUTPUT_DIR="${{ github.event.inputs.output_dir }}"
            VERBOSE="${{ github.event.inputs.verbose }}"
          else
            # API trigger via repository_dispatch
            SOLICITATION_NUMBER="${{ github.event.client_payload.solicitation_number }}"
            OUTPUT_DIR=""
            VERBOSE="false"
          fi
          
          echo "Solicitation Number: $SOLICITATION_NUMBER"
          echo "Output Directory: $OUTPUT_DIR"
          echo "Verbose: $VERBOSE"
          
          # Build command arguments
          CMD_ARGS="$SOLICITATION_NUMBER"
          
          if [ -n "$OUTPUT_DIR" ]; then
            CMD_ARGS="$CMD_ARGS --output-dir $OUTPUT_DIR"
          fi
          
          if [ "$VERBOSE" = "true" ]; then
            CMD_ARGS="$CMD_ARGS --verbose"
          fi
          
          echo "Running: python workflows/adhoc/pull_single_rfq_pdf.py $CMD_ARGS"
          
          # Run the workflow
          python workflows/adhoc/pull_single_rfq_pdf.py $CMD_ARGS
          
          # Check if PDF was downloaded
          if [ -f "downloads/$SOLICITATION_NUMBER.PDF" ]; then
            echo "PDF downloaded successfully"
            echo "pdf_path=downloads/$SOLICITATION_NUMBER.PDF" >> $GITHUB_OUTPUT
            echo "solicitation_number=$SOLICITATION_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "PDF not found - checking for other PDF files"
            ls -la downloads/ || echo "No downloads directory or files found"
          fi
          
      - name: Upload PDF artifact
        if: steps.download.outputs.pdf_path
        uses: actions/upload-artifact@v4
        with:
          name: rfq-pdf-${{ steps.download.outputs.solicitation_number }}
          path: etl/downloads/*.PDF
          retention-days: 7
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: etl-logs
          path: etl/logs/
          retention-days: 30
          
      - name: Check for errors
        if: failure()
        run: |
          cd etl
          echo "=== Error Summary ==="
          echo "Checking logs for errors..."
          if [ -d "logs" ]; then
            find logs -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \;
          else
            echo "No logs directory found"
          fi
          
          echo "=== System Information ==="
          echo "Chrome version:"
          google-chrome --version || echo "Chrome not available"
          echo "ChromeDriver version:"
          chromedriver --version || echo "ChromeDriver not available"
          echo "Python version:"
          python --version
          echo "Pip list:"
          pip list | grep -E "(selenium|pdfplumber|supabase)"
          
      - name: Cleanup
        if: always()
        run: |
          cd etl
          # Clean up downloaded files
          rm -rf downloads/*
          # Clean up logs (keep for artifact upload)
          # rm -rf logs/*
