name: Extract NSN AMSC Code

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      contract_id:
        description: 'Contract ID from universal_contract_queue'
        required: true
        type: string
      nsn:
        description: 'National Stock Number to look up'
        required: true
        type: string
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false
  
  # Allow triggering via API/webhook
  repository_dispatch:
    types: [extract_nsn_amsc]

jobs:
  extract-amsc:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb
          
      - name: Configure Chrome permissions
        run: |
          # Ensure Chrome can run in headless mode
          sudo mkdir -p /etc/opt/chrome/policies/managed/
          echo '{"CommandLineFlagSecurityWarningsEnabled": false}' | sudo tee /etc/opt/chrome/policies/managed/managed_policies.json
          
      - name: Verify Chrome installation
        run: |
          echo "Chrome version:"
          google-chrome --version || echo "Chrome not found in PATH"
          echo "Chrome binary location:"
          which google-chrome || echo "Chrome binary not found"
          
      - name: Install ChromeDriver
        run: |
          # Install ChromeDriver if not present
          if ! command -v chromedriver &> /dev/null; then
            echo "Installing ChromeDriver..."
          
          # First, check what Chrome version we have
          CHROME_VERSION=$(google-chrome --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Chrome version: $CHROME_VERSION"
          
          # Get the major version number
          CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
          echo "Chrome major version: $CHROME_MAJOR_VERSION"
          
          # Try to get the ChromeDriver version that matches our Chrome major version
          echo "Attempting to get ChromeDriver version for Chrome $CHROME_MAJOR_VERSION..."
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_MAJOR_VERSION")
          
          # Check if we got a valid version (not an XML error)
          if [[ "$CHROMEDRIVER_VERSION" == *"<?xml"* ]] || [[ "$CHROMEDRIVER_VERSION" == *"Error"* ]] || [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "No specific ChromeDriver version found for Chrome $CHROME_MAJOR_VERSION, trying previous versions..."
            
            # Try previous major versions (e.g., 138, 137, 136...)
            for version in $(seq $((CHROME_MAJOR_VERSION-1)) -1 $((CHROME_MAJOR_VERSION-10))); do
              echo "Trying ChromeDriver for Chrome version $version..."
              CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$version")
              
              if [[ "$CHROMEDRIVER_VERSION" != *"<?xml"* ]] && [[ "$CHROMEDRIVER_VERSION" != *"Error"* ]] && [ -n "$CHROMEDRIVER_VERSION" ]; then
                echo "✅ Found compatible ChromeDriver version: $CHROMEDRIVER_VERSION (for Chrome $version)"
                break
              fi
            done
            
            # If still no version found, fall back to the latest
            if [[ "$CHROMEDRIVER_VERSION" == *"<?xml"* ]] || [[ "$CHROMEDRIVER_VERSION" == *"Error"* ]] || [ -z "$CHROMEDRIVER_VERSION" ]; then
              echo "No compatible version found, falling back to latest ChromeDriver..."
              CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE")
              echo "Latest available ChromeDriver version: $CHROMEDRIVER_VERSION"
            fi
          else
            echo "✅ Found ChromeDriver version for Chrome $CHROME_MAJOR_VERSION: $CHROMEDRIVER_VERSION"
          fi
          
          # Download and install ChromeDriver
          echo "Downloading ChromeDriver version $CHROMEDRIVER_VERSION..."
          wget -N "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
          
          if [ ! -f "chromedriver_linux64.zip" ]; then
            echo "❌ Failed to download ChromeDriver"
            exit 1
          fi
          
          echo "Downloaded ChromeDriver zip file, size: $(ls -lh chromedriver_linux64.zip)"
          
          # Remove any existing ChromeDriver to avoid conflicts
          echo "Removing any existing ChromeDriver..."
          sudo rm -f /usr/local/bin/chromedriver
          sudo rm -f /usr/bin/chromedriver
          
          # Extract and install
          echo "Extracting ChromeDriver..."
          unzip -o chromedriver_linux64.zip
          ls -la chromedriver*
          
          echo "Setting permissions and installing..."
          chmod +x chromedriver
          sudo mv chromedriver /usr/local/bin/
          
          # Verify ChromeDriver installation
          echo "Verifying ChromeDriver installation..."
          echo "ChromeDriver location: $(which chromedriver)"
          echo "ChromeDriver version:"
          chromedriver --version
          
          if [ $? -eq 0 ]; then
            echo "✅ ChromeDriver installation completed successfully"
            echo "ChromeDriver path: $(which chromedriver)"
            echo "ChromeDriver version: $(chromedriver --version)"
            
            # Additional verification - check if it's the version we expect
            INSTALLED_VERSION=$(chromedriver --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            echo "Installed ChromeDriver version: $INSTALLED_VERSION"
            echo "Expected ChromeDriver version: $CHROMEDRIVER_VERSION"
            
            if [[ "$INSTALLED_VERSION" == "$CHROMEDRIVER_VERSION" ]]; then
              echo "✅ Version match confirmed!"
            else
              echo "⚠️ Version mismatch, but ChromeDriver is working"
            fi
          else
            echo "❌ ChromeDriver installation failed"
            echo "Available ChromeDriver files:"
            ls -la /usr/local/bin/chromedriver* || echo "No ChromeDriver in /usr/local/bin"
            ls -la /usr/bin/chromedriver* || echo "No ChromeDriver in /usr/bin"
            echo ""
            echo "Trying to debug the issue..."
            echo "Current working directory: $(pwd)"
            echo "Files in current directory:"
            ls -la
            echo ""
            echo "ChromeDriver binary details:"
            file chromedriver || echo "chromedriver file not found"
            echo ""
            exit 1
          fi
          else
            echo "ChromeDriver already installed:"
            chromedriver --version
          fi
          
      - name: Test Chrome setup
        run: |
          # Test Chrome and ChromeDriver
          echo "=== Chrome Setup Verification ==="
          echo "Chrome version:"
          google-chrome --version
          echo ""
          echo "ChromeDriver version:"
          chromedriver --version
          echo ""
          echo "ChromeDriver location:"
          which chromedriver
          echo ""
          echo "ChromeDriver path contents:"
          ls -la /usr/local/bin/chromedriver* || echo "No ChromeDriver in /usr/local/bin"
          ls -la /usr/bin/chromedriver* || echo "No ChromeDriver in /usr/bin"
          echo ""
          echo "PATH environment:"
          echo $PATH
          
      - name: Set up environment variables
        run: |
          # Create .env file from GitHub secrets
          cat > etl/.env << EOF
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY=${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DIBBS_BASE_URL=https://dibbs2.bsm.dla.mil
          DIBBS_DOWNLOAD_DIR=./downloads
          SELENIUM_HEADLESS=true
          SELENIUM_TIMEOUT=30
          LOG_LEVEL=INFO
          LOG_FILE=./logs/etl.log
          SUPABASE_BUCKET_NAME=docs
          EOF
          
      - name: Install Python dependencies
        run: |
          cd etl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create necessary directories
        run: |
          cd etl
          mkdir -p downloads logs
          
      - name: Ensure correct ChromeDriver is used
        run: |
          echo "=== Ensuring Correct ChromeDriver ==="
          echo "Current ChromeDriver:"
          which chromedriver
          chromedriver --version
          echo ""
          echo "Removing any conflicting ChromeDriver installations..."
          sudo rm -f /usr/bin/chromedriver
          sudo rm -f /snap/bin/chromedriver
          echo ""
          echo "Verifying ChromeDriver installation:"
          which chromedriver
          chromedriver --version
          echo ""
          echo "ChromeDriver should be in /usr/local/bin:"
          ls -la /usr/local/bin/chromedriver*
          echo ""
          echo "PATH environment variable:"
          echo $PATH
          echo ""
          echo "Testing ChromeDriver execution:"
          /usr/local/bin/chromedriver --version
          echo ""
          echo "Making sure ChromeDriver is executable:"
          sudo chmod +x /usr/local/bin/chromedriver
          ls -la /usr/local/bin/chromedriver*
          
      - name: Extract NSN AMSC Code
        id: extract
        run: |
          cd etl
          
          # Handle both workflow_dispatch and repository_dispatch events
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger from GitHub UI
            CONTRACT_ID="${{ github.event.inputs.contract_id }}"
            NSN="${{ github.event.inputs.nsn }}"
            VERBOSE="${{ github.event.inputs.verbose }}"
          else
            # API trigger via repository_dispatch
            CONTRACT_ID="${{ github.event.client_payload.contract_id }}"
            NSN="${{ github.event.client_payload.nsn }}"
            VERBOSE="false"
          fi
          
          echo "Contract ID: $CONTRACT_ID"
          echo "NSN: $NSN"
          echo "Verbose: $VERBOSE"
          
          # Build command with optional verbose flag
          CMD="python workflows/adhoc/extract_nsn_amsc.py '$CONTRACT_ID' '$NSN'"
          if [ "$VERBOSE" = "true" ]; then
            CMD="$CMD --verbose"
          fi
          
          echo "Running: $CMD"
          eval $CMD
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: amsc-extraction-logs
          path: |
            etl/logs/
            etl/downloads/
          retention-days: 7
