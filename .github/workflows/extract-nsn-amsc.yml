name: Extract NSN AMSC Code

on:
  # Manual trigger from GitHub UI
  workflow_dispatch:
    inputs:
      contract_id:
        description: 'Contract ID from universal_contract_queue'
        required: true
        type: string
      nsn:
        description: 'National Stock Number to look up'
        required: true
        type: string
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false
  
  # Allow triggering via API/webhook
  repository_dispatch:
    types: [extract_nsn_amsc]

jobs:
  extract-amsc:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          
      - name: Set up Chrome
        uses: browser-actions/setup-chrome@v1
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb
          
      - name: Configure Chrome permissions
        run: |
          # Ensure Chrome can run in headless mode
          sudo mkdir -p /etc/opt/chrome/policies/managed/
          echo '{"CommandLineFlagSecurityWarningsEnabled": false}' | sudo tee /etc/opt/chrome/policies/managed/managed_policies.json
          
      - name: Verify Chrome installation
        run: |
          echo "Chrome version:"
          google-chrome --version || echo "Chrome not found in PATH"
          echo "Chrome binary location:"
          which google-chrome || echo "Chrome binary not found"
            
      - name: Setup ChromeDriver
        uses: ./.github/actions/setup-chromedriver
          
      - name: Test Chrome setup
        run: |
          # Test Chrome and ChromeDriver
          echo "=== Chrome Setup Verification ==="
          echo "Chrome version:"
          google-chrome --version
          echo ""
          echo "ChromeDriver version:"
          chromedriver --version
          echo ""
          echo "ChromeDriver location:"
          which chromedriver
          echo ""
          echo "ChromeDriver path contents:"
          ls -la /usr/local/bin/chromedriver* || echo "No ChromeDriver in /usr/local/bin"
          ls -la /usr/bin/chromedriver* || echo "No ChromeDriver in /usr/bin"
          echo ""
          echo "PATH environment:"
          echo $PATH
          
      - name: Set up environment variables
        run: |
          # Create .env file from GitHub secrets
          cat > etl/.env << EOF
          VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY=${{ secrets.VITE_SUPABASE_PUBLISHABLE_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          DIBBS_BASE_URL=https://dibbs2.bsm.dla.mil
          DIBBS_DOWNLOAD_DIR=./downloads
          SELENIUM_HEADLESS=true
          SELENIUM_TIMEOUT=30
          LOG_LEVEL=INFO
          LOG_FILE=./logs/etl.log
          SUPABASE_BUCKET_NAME=docs
          EOF
          
      - name: Install Python dependencies
        run: |
          cd etl
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create necessary directories
        run: |
          cd etl
          mkdir -p downloads logs
          
      - name: Extract NSN AMSC Code
        id: extract
        run: |
          cd etl
          
          # Ensure ChromeDriver is in PATH for Python execution
          export PATH="/usr/local/bin:$PATH"
          echo "PATH for Python execution: $PATH"
          echo "ChromeDriver location: $(which chromedriver)"
          echo "ChromeDriver version: $(chromedriver --version)"
          
          # Handle both workflow_dispatch and repository_dispatch events
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CONTRACT_ID="${{ github.event.inputs.contract_id }}"
            NSN="${{ github.event.inputs.nsn }}"
            VERBOSE="${{ github.event.inputs.verbose }}"
          else
            # repository_dispatch event
            CONTRACT_ID="${{ github.event.client_payload.contract_id }}"
            NSN="${{ github.event.client_payload.nsn }}"
            VERBOSE="${{ github.event.client_payload.verbose }}"
          fi
          
          echo "Contract ID: $CONTRACT_ID"
          echo "NSN: $NSN"
          echo "Verbose: $VERBOSE"
          
          # Run the AMSC extraction
          python -m core.scrapers.dibbs_scraper extract_nsn_amsc "$NSN" "$CONTRACT_ID" "$VERBOSE"
          
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nsn-amsc-logs
          path: |
            etl/logs/
            etl/downloads/
          retention-days: 7
